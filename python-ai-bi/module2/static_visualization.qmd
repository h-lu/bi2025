---
title: "静态数据可视化"
---

## 静态可视化的重要性

静态可视化是数据分析中不可或缺的工具，它能够直观地呈现数据中的模式、趋势和关系。相比于表格数据，可视化能够帮助我们：

- 快速发现数据中的异常和模式
- 有效传达数据背后的故事
- 支持决策和假设验证
- 简化复杂数据的理解过程

本章将介绍Python中常用的静态可视化工具和技术，特别是基于Matplotlib和Seaborn库的应用。

## Matplotlib基础

Matplotlib是Python中最基础也是最常用的可视化库，它提供了创建各种图表的功能。

### 基本绘图元素

```{python}
#| label: matplotlib-basics
#| fig-cap: "Matplotlib基本元素示例"

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

# 设置中文显示
plt.rcParams['font.sans-serif'] = ['SimHei']  # 用来正常显示中文标签
plt.rcParams['axes.unicode_minus'] = False    # 用来正常显示负号

# 创建基本图形
x = np.linspace(0, 10, 100)
y = np.sin(x)

plt.figure(figsize=(10, 6))
plt.plot(x, y, label='sin(x)')
plt.title('正弦函数图')
plt.xlabel('x值')
plt.ylabel('sin(x)')
plt.legend()
plt.grid(True, alpha=0.3)
plt.show()
```

### 子图与多图布局

```{python}
#| label: subplots
#| fig-cap: "使用子图展示多个图表"

# 创建子图
fig, axs = plt.subplots(2, 2, figsize=(12, 8))

# 第一个子图：线图
axs[0, 0].plot(x, np.sin(x), 'r-', label='sin(x)')
axs[0, 0].plot(x, np.cos(x), 'b--', label='cos(x)')
axs[0, 0].set_title('三角函数')
axs[0, 0].set_xlabel('x')
axs[0, 0].set_ylabel('y')
axs[0, 0].legend()
axs[0, 0].grid(True, alpha=0.3)

# 第二个子图：散点图
np.random.seed(42)
x2 = np.random.rand(50)
y2 = x2 + np.random.normal(0, 0.2, 50)
axs[0, 1].scatter(x2, y2, color='green', alpha=0.6)
axs[0, 1].set_title('散点图')
axs[0, 1].set_xlabel('x')
axs[0, 1].set_ylabel('y')
axs[0, 1].grid(True, alpha=0.3)

# 第三个子图：条形图
categories = ['A', 'B', 'C', 'D', 'E']
values = [3, 7, 2, 5, 9]
axs[1, 0].bar(categories, values, color='purple')
axs[1, 0].set_title('条形图')
axs[1, 0].set_xlabel('类别')
axs[1, 0].set_ylabel('数值')
axs[1, 0].grid(True, alpha=0.3)

# 第四个子图：饼图
sizes = [15, 30, 25, 10, 20]
labels = ['苹果', '香蕉', '橙子', '梨', '葡萄']
axs[1, 1].pie(sizes, labels=labels, autopct='%1.1f%%',
             shadow=True, startangle=90)
axs[1, 1].set_title('饼图')
axs[1, 1].axis('equal')  # 使饼图为正圆形

plt.tight_layout()
plt.show()
```

### 自定义风格和颜色

```{python}
#| label: custom-styles
#| fig-cap: "自定义图表风格和颜色"

# 显示所有可用的样式
print("Matplotlib可用样式:")
print(plt.style.available)

# 使用不同的样式
styles = ['default', 'ggplot', 'seaborn', 'bmh']
fig, axs = plt.subplots(2, 2, figsize=(12, 8))

# 循环使用不同的样式
for ax, style in zip(axs.flat, styles):
    with plt.style.context(style):
        ax.plot(x, np.sin(x))
        ax.set_title(f'样式: {style}')
        ax.set_xlabel('x')
        ax.set_ylabel('sin(x)')
        ax.grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# 自定义颜色映射
plt.figure(figsize=(10, 6))
for i, cmap_name in enumerate(['viridis', 'plasma', 'inferno', 'magma']):
    plt.subplot(2, 2, i+1)
    x = np.random.randn(1000)
    y = np.random.randn(1000)
    plt.scatter(x, y, c=x+y, cmap=cmap_name, alpha=0.6)
    plt.title(f'颜色映射: {cmap_name}')
    plt.colorbar()

plt.tight_layout()
plt.show()
```

## 常用的静态图表类型

### 线图(Line Plot)

线图适用于展示数据随时间变化的趋势或连续数据间的关系。

```{python}
#| label: line-plots
#| fig-cap: "线图示例 - 股票价格走势"

# 模拟股票价格数据
np.random.seed(42)
dates = pd.date_range('2023-01-01', periods=100)
stock_a = 100 + np.cumsum(np.random.normal(0.1, 1, 100))
stock_b = 100 + np.cumsum(np.random.normal(0.05, 1.5, 100))

plt.figure(figsize=(12, 6))
plt.plot(dates, stock_a, 'b-', label='股票A')
plt.plot(dates, stock_b, 'r--', label='股票B')
plt.title('股票价格走势')
plt.xlabel('日期')
plt.ylabel('价格')
plt.legend()
plt.grid(True, alpha=0.3)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
```

### 散点图(Scatter Plot)

散点图用于展示两个变量之间的关系，特别是相关性分析。

```{python}
#| label: scatter-plots
#| fig-cap: "散点图示例 - 变量相关性"

# 使用真实数据集
df = sns.load_dataset('tips')

plt.figure(figsize=(10, 6))
plt.scatter(df['total_bill'], df['tip'], c=df['size'], 
            cmap='viridis', alpha=0.7, s=100)
plt.title('消费总额与小费的关系')
plt.xlabel('消费总额($)')
plt.ylabel('小费($)')
plt.colorbar(label='就餐人数')
plt.grid(True, alpha=0.3)
plt.tight_layout()
plt.show()
```

### 条形图(Bar Plot)

条形图适用于比较不同类别之间的数量差异。

```{python}
#| label: bar-plots
#| fig-cap: "条形图示例 - 不同日期的消费情况"

# 按日期汇总数据
day_summary = df.groupby('day')[['total_bill', 'tip']].sum().reset_index()

# 创建分组条形图
fig, ax = plt.subplots(figsize=(10, 6))
x = np.arange(len(day_summary['day']))
width = 0.35

ax.bar(x - width/2, day_summary['total_bill'], width, label='消费总额', color='skyblue')
ax.bar(x + width/2, day_summary['tip'], width, label='小费', color='lightcoral')

ax.set_title('不同日期的消费情况对比')
ax.set_xlabel('星期')
ax.set_ylabel('金额($)')
ax.set_xticks(x)
ax.set_xticklabels(day_summary['day'])
ax.legend()
ax.grid(True, alpha=0.3)

plt.tight_layout()
plt.show()
```

### 热力图(Heatmap)

热力图用于可视化矩阵数据，如相关性矩阵或混淆矩阵。

```{python}
#| label: heatmap
#| fig-cap: "热力图示例 - 变量相关性矩阵"

# 计算相关性矩阵
correlation = df.corr()

plt.figure(figsize=(10, 8))
sns.heatmap(correlation, annot=True, cmap='coolwarm', 
            linewidths=0.5, vmin=-1, vmax=1)
plt.title('变量之间的相关性矩阵')
plt.tight_layout()
plt.show()
```

### 箱线图(Box Plot)

箱线图提供了数据分布的完整概况，包括中位数、四分位数和异常值。

```{python}
#| label: boxplot
#| fig-cap: "箱线图示例 - 不同时间的小费分布"

plt.figure(figsize=(12, 6))
sns.boxplot(x='day', y='tip', hue='time', data=df, palette='Set3')
plt.title('不同时间和日期的小费分布')
plt.xlabel('星期')
plt.ylabel('小费($)')
plt.legend(title='用餐时间')
plt.grid(True, alpha=0.3)
plt.tight_layout()
plt.show()
```

### 小提琴图(Violin Plot)

小提琴图结合了箱线图和核密度图的特点，能更好地展示数据分布形状。

```{python}
#| label: violinplot
#| fig-cap: "小提琴图示例 - 不同用餐时间的消费分布"

plt.figure(figsize=(12, 6))
sns.violinplot(x='day', y='total_bill', hue='time', 
               data=df, palette='muted', split=True)
plt.title('不同日期和时间的消费分布')
plt.xlabel('星期')
plt.ylabel('消费总额($)')
plt.legend(title='用餐时间')
plt.grid(True, alpha=0.3)
plt.tight_layout()
plt.show()
```

## 高级可视化技术

### 子图的高级布局

```{python}
#| label: advanced-layout
#| fig-cap: "高级子图布局示例"

from matplotlib.gridspec import GridSpec

fig = plt.figure(figsize=(12, 8))
gs = GridSpec(3, 3, figure=fig)

# 创建不同大小的子图
ax1 = fig.add_subplot(gs[0, :])  # 第一行横跨所有列
ax2 = fig.add_subplot(gs[1, :-1])  # 第二行除了最后一列
ax3 = fig.add_subplot(gs[1:, -1])  # 最后一列的第二行和第三行
ax4 = fig.add_subplot(gs[2, 0])  # 第三行第一列
ax5 = fig.add_subplot(gs[2, 1])  # 第三行第二列

# 在不同子图中绘制不同的图表
ax1.plot(x, np.sin(x), 'r-')
ax1.set_title('正弦函数')
ax1.grid(True, alpha=0.3)

ax2.scatter(df['total_bill'], df['tip'], alpha=0.6)
ax2.set_title('账单与小费')
ax2.grid(True, alpha=0.3)

ax3.barh(day_summary['day'], day_summary['total_bill'], color='green')
ax3.set_title('按日消费')
ax3.grid(True, alpha=0.3)

categories = ['A', 'B', 'C', 'D']
values = [3, 7, 2, 5]
ax4.bar(categories, values, color='purple')
ax4.set_title('类别数据')
ax4.grid(True, alpha=0.3)

ax5.pie([15, 30, 55], labels=['A', 'B', 'C'], autopct='%1.1f%%')
ax5.set_title('比例分布')

plt.tight_layout()
plt.show()
```

### 双Y轴图表

```{python}
#| label: dual-y-axis
#| fig-cap: "双Y轴图表示例"

# 创建具有两个Y轴的图表
fig, ax1 = plt.subplots(figsize=(10, 6))

# 第一个Y轴
color = 'tab:blue'
ax1.set_xlabel('日期')
ax1.set_ylabel('股价($)', color=color)
ax1.plot(dates, stock_a, color=color, label='股票A价格')
ax1.tick_params(axis='y', labelcolor=color)

# 第二个Y轴
ax2 = ax1.twinx()  # 创建共享x轴的第二个y轴
color = 'tab:red'
ax2.set_ylabel('交易量(百万)', color=color)
volume = np.abs(np.random.normal(1, 0.5, len(dates))) * stock_a / 100
ax2.plot(dates, volume, color=color, label='交易量')
ax2.tick_params(axis='y', labelcolor=color)

# 添加标题和图例
fig.suptitle('股票价格与交易量对比', fontsize=16)
lines1, labels1 = ax1.get_legend_handles_labels()
lines2, labels2 = ax2.get_legend_handles_labels()
ax1.legend(lines1 + lines2, labels1 + labels2, loc='upper left')

plt.grid(True, alpha=0.3)
fig.tight_layout()
plt.show()
```

### 地理数据可视化

```{python}
#| label: geo-visualization
#| fig-cap: "地理数据可视化示例"

from matplotlib.colors import LinearSegmentedColormap

try:
    # 尝试加载世界地图数据
    world = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
    
    # 创建随机GDP增长率数据
    np.random.seed(42)
    world['GDP_Growth'] = np.random.normal(loc=2, scale=3, size=len(world))
    
    # 创建自定义颜色映射
    cmap = LinearSegmentedColormap.from_list('custom_cmap', ['red', 'white', 'green'], N=256)
    
    # 使用geopandas绘制世界地图
    try:
        import geopandas as gpd
        # 加载世界地图边界数据
        world_geo = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))
        # 合并GDP数据
        world_geo = world_geo.merge(world, how='left', left_on='iso_a3', right_on='CODE')
        
        fig, ax = plt.subplots(figsize=(15, 10))
        world_geo.plot(column='GDP_Growth', ax=ax, cmap=cmap, 
                       legend=True, legend_kwds={'label': 'GDP增长率(%)'})
        ax.set_title('全球GDP增长率分布示例')
        ax.set_axis_off()
        plt.tight_layout()
        plt.show()
    except (ImportError, Exception) as e:
        print(f"无法使用geopandas绘制地图: {e}")
        print("替代方案：使用简化的地图可视化")
        
        # 简化版本：使用散点图表示国家
        fig, ax = plt.subplots(figsize=(12, 8))
        scatter = ax.scatter(np.random.rand(len(world)), np.random.rand(len(world)), 
                  c=world['GDP_Growth'], cmap=cmap, alpha=0.7, s=100)
        plt.colorbar(scatter, label='GDP增长率(%)')
        ax.set_title('简化版全球GDP增长率分布示例')
        ax.set_xlabel('经度(简化表示)')
        ax.set_ylabel('纬度(简化表示)')
        ax.set_xticks([])
        ax.set_yticks([])
        plt.tight_layout()
        plt.show()
        
except Exception as e:
    print(f"无法加载地理数据: {e}")
    print("展示替代的地理数据可视化示例")
    
    # 创建模拟数据
    regions = ['北美', '南美', '欧洲', '亚洲', '非洲', '大洋洲']
    values = [25, 15, 30, 35, 10, 5]
    
    plt.figure(figsize=(12, 8))
    ax = plt.subplot(111, projection='polar')
    theta = np.linspace(0, 2*np.pi, len(regions), endpoint=False)
    
    ax.bar(theta, values, width=0.5, alpha=0.8, 
           color=plt.cm.viridis(np.linspace(0, 1, len(regions))))
    
    ax.set_xticks(theta)
    ax.set_xticklabels(regions)
    ax.set_title('区域数据分布(极坐标表示)')
    
    plt.tight_layout()
    plt.show()
```

## 可视化中的最佳实践

### 设计原则

有效的数据可视化应遵循以下关键原则：

1. **简洁明了**：避免图表杂乱，关注核心信息
2. **选择合适的图表类型**：根据数据特性和分析目的选择图表
3. **使用恰当的颜色和风格**：颜色应有意义且对比适当
4. **提供充分的上下文**：添加标题、标签和图例
5. **确保可访问性**：考虑色盲友好的配色方案

```{python}
#| label: best-practices
#| fig-cap: "良好与不良可视化示例对比"

# 创建样本数据
categories = ['产品A', '产品B', '产品C', '产品D', '产品E']
values = [25, 40, 30, 50, 35]

# 不良实践示例
plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
plt.title('不良实践示例')
plt.bar(categories, values, color='red')
plt.xticks(rotation=0)
plt.grid(True)
plt.ylim(0, 100)  # 设置不合理的y轴范围

# 良好实践示例
plt.subplot(1, 2, 2)
plt.title('良好实践示例')
plt.bar(categories, values, color='steelblue')
plt.xlabel('产品类别')
plt.ylabel('销售量')
plt.xticks(rotation=45)
plt.grid(True, alpha=0.3, linestyle='--')
plt.ylim(0, max(values) * 1.2)  # 合理的y轴范围

plt.tight_layout()
plt.show()
```

### 图表注释和强调

在可视化中，适当的注释和强调可以引导读者关注关键信息。

```{python}
#| label: annotations
#| fig-cap: "图表注释和强调示例"

# 创建含有趋势的时间序列数据
dates = pd.date_range('2023-01-01', periods=100)
data = 100 + np.cumsum(np.random.normal(0.1, 1, 100))
# 添加一个明显的异常值
data[70] = data[69] + 15

plt.figure(figsize=(12, 6))
plt.plot(dates, data, 'b-', lw=2)
plt.title('销售趋势分析')
plt.xlabel('日期')
plt.ylabel('销售额')
plt.grid(True, alpha=0.3)

# 添加趋势线
from scipy import stats
slope, intercept, r, p, std_err = stats.linregress(range(len(dates)), data)
plt.plot(dates, intercept + slope * np.arange(len(dates)), 'r--', 
         label=f'趋势线 (斜率: {slope:.2f})')

# 添加注释
plt.annotate('异常销售增长!', 
             xy=(dates[70], data[70]),
             xytext=(dates[75], data[70]+10),
             arrowprops=dict(facecolor='red', shrink=0.05),
             fontsize=12)

# 强调重要区域
plt.axvspan(dates[20], dates[40], alpha=0.2, color='yellow', 
            label='促销活动期间')

plt.legend()
plt.tight_layout()
plt.show()
```

## 案例实践：综合数据分析可视化

让我们通过一个综合案例展示如何使用多种可视化技术来分析一个真实数据集。

```{python}
#| label: comprehensive-case
#| fig-cap: "综合数据分析可视化案例"

# 使用鸢尾花数据集
from sklearn.datasets import load_iris
iris = load_iris()
iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)
iris_df['species'] = [iris.target_names[i] for i in iris.target]

# 创建一个综合分析面板
fig = plt.figure(figsize=(15, 12))
gs = GridSpec(3, 3, figure=fig)

# 1. 散点图矩阵局部视图
ax1 = fig.add_subplot(gs[0, :2])
sepal_length = iris_df['sepal length (cm)']
sepal_width = iris_df['sepal width (cm)']
colors = {'setosa': 'red', 'versicolor': 'green', 'virginica': 'blue'}
for species, group in iris_df.groupby('species'):
    ax1.scatter(group['sepal length (cm)'], group['sepal width (cm)'], 
                label=species, color=colors[species], alpha=0.7)
ax1.set_title('花萼长度与宽度关系')
ax1.set_xlabel('花萼长度 (cm)')
ax1.set_ylabel('花萼宽度 (cm)')
ax1.legend()
ax1.grid(True, alpha=0.3)

# 2. 各类别的特征箱线图
ax2 = fig.add_subplot(gs[0, 2])
iris_melted = pd.melt(iris_df, id_vars=['species'], 
                      value_vars=['sepal length (cm)', 'sepal width (cm)', 
                                  'petal length (cm)', 'petal width (cm)'],
                      var_name='measurement', value_name='value')
sns.boxplot(x='measurement', y='value', hue='species', data=iris_melted,
            palette=colors, ax=ax2)
ax2.set_title('各特征在不同种类中的分布')
ax2.set_xticklabels([])  # 隐藏x轴标签，避免拥挤
ax2.legend(title='种类')
ax2.grid(True, alpha=0.3)

# 3. 每个特征的分布直方图
features = iris.feature_names
for i, feature in enumerate(features):
    ax = fig.add_subplot(gs[1, i % 3])
    for species, group in iris_df.groupby('species'):
        sns.histplot(group[feature], kde=True, label=species, color=colors[species],
                    alpha=0.5, ax=ax)
    ax.set_title(f'{feature} 分布')
    ax.grid(True, alpha=0.3)
    if i == 0:  # 只在第一个子图中显示图例
        ax.legend(title='种类')

# 4. 特征相关性热力图
ax4 = fig.add_subplot(gs[2, :2])
corr = iris_df.drop('species', axis=1).corr()
sns.heatmap(corr, annot=True, cmap='coolwarm', ax=ax4)
ax4.set_title('特征相关性热力图')

# 5. 3D散点图
try:
    from mpl_toolkits.mplot3d import Axes3D
    ax5 = fig.add_subplot(gs[2, 2], projection='3d')
    for species, group in iris_df.groupby('species'):
        ax5.scatter(group['sepal length (cm)'], group['sepal width (cm)'], 
                   group['petal length (cm)'], label=species, alpha=0.7)
    ax5.set_title('三维特征空间')
    ax5.set_xlabel('花萼长度')
    ax5.set_ylabel('花萼宽度')
    ax5.set_zlabel('花瓣长度')
    ax5.legend()
except Exception as e:
    ax5 = fig.add_subplot(gs[2, 2])
    ax5.text(0.5, 0.5, f"无法创建3D图: {e}", ha='center', va='center')
    ax5.axis('off')

plt.tight_layout()
plt.suptitle('鸢尾花数据集综合分析', fontsize=16, y=1.02)
plt.show()
```

## 小结

静态数据可视化是数据分析师的核心技能，它不仅能帮助我们理解数据，还能有效地向他人传达我们的发现。本章介绍了：

1. Matplotlib和Seaborn的基础知识
2. 各种常用图表类型及其适用场景
3. 高级可视化技术和布局方法
4. 可视化设计的最佳实践
5. 如何通过综合分析案例应用多种可视化技术

在下一章中，我们将探讨如何将静态可视化扩展到交互式可视化，以实现更加动态和深入的数据探索。 