---
title: "数据分布分析"
---

## 数据分布的重要性

在数据探索分析过程中，理解数据的分布特性对后续的分析和建模至关重要。数据分布可以帮助我们：

- 识别数据中的异常值和离群点
- 确定适合数据的统计方法
- 指导特征工程和变量转换
- 为模型选择提供依据

## 常见的分布类型

### 正态分布(Normal Distribution)

正态分布是最常见的概率分布之一，具有钟形曲线的特征。

```{python}
#| label: normal-distribution
#| fig-cap: "正态分布示例"

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# 设置中文显示
plt.rcParams['font.sans-serif'] = ['SimHei']  # 用来正常显示中文标签
plt.rcParams['axes.unicode_minus'] = False    # 用来正常显示负号

# 生成正态分布数据
np.random.seed(42)
data_normal = np.random.normal(loc=0, scale=1, size=1000)

# 绘制直方图和密度图
plt.figure(figsize=(10, 6))
sns.histplot(data_normal, kde=True, color='skyblue')
plt.title('正态分布示例')
plt.xlabel('数值')
plt.ylabel('频率')
plt.grid(True, alpha=0.3)
plt.show()
```

### 偏态分布(Skewed Distribution)

偏态分布不同于正态分布，表现为不对称的形状。常见的有：

- 右偏分布(positively skewed)：尾部向右延伸
- 左偏分布(negatively skewed)：尾部向左延伸

```{python}
#| label: skewed-distributions
#| fig-cap: "左偏和右偏分布示例"

# 生成左偏和右偏分布
np.random.seed(42)
data_right_skew = np.random.exponential(scale=2.0, size=1000)
data_left_skew = 10 - np.random.exponential(scale=2.0, size=1000)

# 创建包含两种分布的数据框
df = pd.DataFrame({
    '右偏分布': data_right_skew,
    '左偏分布': data_left_skew
})

# 绘制两种分布的对比
fig, axs = plt.subplots(1, 2, figsize=(12, 5))

sns.histplot(df['右偏分布'], kde=True, color='coral', ax=axs[0])
axs[0].set_title('右偏分布')
axs[0].set_xlabel('数值')
axs[0].set_ylabel('频率')
axs[0].grid(True, alpha=0.3)

sns.histplot(df['左偏分布'], kde=True, color='lightgreen', ax=axs[1])
axs[1].set_title('左偏分布')
axs[1].set_xlabel('数值')
axs[1].set_ylabel('频率')
axs[1].grid(True, alpha=0.3)

plt.tight_layout()
plt.show()
```

### 多峰分布(Multimodal Distribution)

多峰分布表现为具有多个"峰值"的分布形态，通常表明数据中可能存在不同的组群。

```{python}
#| label: multimodal-distribution
#| fig-cap: "多峰分布示例"

# 生成多峰分布
np.random.seed(42)
data_multimodal = np.concatenate([
    np.random.normal(loc=-3, scale=1, size=300),
    np.random.normal(loc=2, scale=0.8, size=400),
    np.random.normal(loc=7, scale=1.2, size=300)
])

plt.figure(figsize=(10, 6))
sns.histplot(data_multimodal, kde=True, bins=30, color='mediumpurple')
plt.title('多峰分布示例')
plt.xlabel('数值')
plt.ylabel('频率')
plt.grid(True, alpha=0.3)
plt.show()
```

## 分布分析方法

### 图形化方法

1. **直方图(Histogram)**：最基本的分布可视化工具

```{python}
#| label: histogram-example
#| fig-cap: "使用直方图分析数据分布"

# 使用真实数据集示例
df = sns.load_dataset('tips')

plt.figure(figsize=(10, 6))
sns.histplot(df['total_bill'], bins=20, color='skyblue', edgecolor='black')
plt.title('账单总额分布')
plt.xlabel('账单金额')
plt.ylabel('频率')
plt.grid(True, alpha=0.3)
plt.show()
```

2. **密度图(Density Plot)**：直方图的平滑版本

```{python}
#| label: density-plot
#| fig-cap: "使用密度图分析数据分布"

plt.figure(figsize=(10, 6))
sns.kdeplot(df['total_bill'], fill=True, color='lightseagreen')
plt.title('账单总额密度分布')
plt.xlabel('账单金额')
plt.ylabel('密度')
plt.grid(True, alpha=0.3)
plt.show()
```

3. **箱线图(Box Plot)**：展示数据的分位数和离群点

```{python}
#| label: boxplot-example
#| fig-cap: "使用箱线图分析数据分布和异常值"

plt.figure(figsize=(10, 6))
sns.boxplot(x='day', y='total_bill', data=df)
plt.title('不同日期的账单金额分布')
plt.xlabel('星期')
plt.ylabel('账单金额')
plt.grid(True, alpha=0.3)
plt.show()
```

4. **Q-Q图(Quantile-Quantile Plot)**：用于比较数据与理论分布的差异

```{python}
#| label: qq-plot
#| fig-cap: "Q-Q图检验数据是否符合正态分布"

import scipy.stats as stats

plt.figure(figsize=(10, 6))
stats.probplot(df['total_bill'], plot=plt)
plt.title('账单金额的Q-Q图')
plt.grid(True, alpha=0.3)
plt.show()
```

### 统计检验方法

在图形分析之外，还可以使用统计检验来评估数据分布：

1. **Shapiro-Wilk检验**：检验数据是否符合正态分布

```{python}
#| label: shapiro-test

from scipy.stats import shapiro

# 进行Shapiro-Wilk正态性检验
stat, p_value = shapiro(df['total_bill'])
print(f'Shapiro-Wilk统计量: {stat:.4f}')
print(f'p值: {p_value:.4e}')
print(f'结论: {"数据可能不符合正态分布" if p_value < 0.05 else "无法拒绝数据符合正态分布的假设"}')
```

2. **D'Agostino's K²检验**：同样用于正态性检验

```{python}
#| label: dagostino-test

from scipy.stats import normaltest

# 进行D'Agostino's K²检验
stat, p_value = normaltest(df['total_bill'])
print(f"D'Agostino's K²统计量: {stat:.4f}")
print(f'p值: {p_value:.4e}')
print(f'结论: {"数据可能不符合正态分布" if p_value < 0.05 else "无法拒绝数据符合正态分布的假设"}')
```

## 分布变换方法

当数据分布不理想时，我们可以通过变换使其更接近所需的分布形态：

### 对数变换(Log Transformation)

对数变换常用于处理右偏数据。

```{python}
#| label: log-transformation
#| fig-cap: "对数变换前后的分布对比"

# 选择右偏的数据
np.random.seed(42)
right_skewed_data = np.random.exponential(scale=2.0, size=1000)

# 进行对数变换
log_transformed = np.log1p(right_skewed_data)  # log1p = log(1+x)，避免x=0的问题

# 绘制变换前后的对比
fig, axs = plt.subplots(1, 2, figsize=(12, 5))

sns.histplot(right_skewed_data, kde=True, color='salmon', ax=axs[0])
axs[0].set_title('原始右偏数据')
axs[0].set_xlabel('数值')
axs[0].set_ylabel('频率')
axs[0].grid(True, alpha=0.3)

sns.histplot(log_transformed, kde=True, color='skyblue', ax=axs[1])
axs[1].set_title('对数变换后的数据')
axs[1].set_xlabel('log(1+x)')
axs[1].set_ylabel('频率')
axs[1].grid(True, alpha=0.3)

plt.tight_layout()
plt.show()
```

### Box-Cox变换

Box-Cox变换是一种更灵活的变换方法，可以根据数据特性自动找到最佳的变换参数。

```{python}
#| label: box-cox-transformation
#| fig-cap: "Box-Cox变换前后的分布对比"

from scipy.stats import boxcox

# Box-Cox变换（只能用于正值数据）
positive_data = df['total_bill'].values
transformed_data, lambda_value = boxcox(positive_data)

# 绘制变换前后的对比
fig, axs = plt.subplots(1, 2, figsize=(12, 5))

sns.histplot(positive_data, kde=True, color='coral', ax=axs[0])
axs[0].set_title('原始数据')
axs[0].set_xlabel('数值')
axs[0].set_ylabel('频率')
axs[0].grid(True, alpha=0.3)

sns.histplot(transformed_data, kde=True, color='lightgreen', ax=axs[1])
axs[1].set_title(f'Box-Cox变换后的数据 (λ = {lambda_value:.4f})')
axs[1].set_xlabel('变换后数值')
axs[1].set_ylabel('频率')
axs[1].grid(True, alpha=0.3)

plt.tight_layout()
plt.show()
```

## 实际应用案例

### 案例：房价数据分布分析

```{python}
#| label: housing-price-distribution
#| fig-cap: "房价数据的分布分析与变换"

# 导入房价数据
from sklearn.datasets import fetch_california_housing
housing = fetch_california_housing()
housing_df = pd.DataFrame(housing.data, columns=housing.feature_names)
housing_df['Price'] = housing.target

# 分析房价分布
fig, axs = plt.subplots(1, 3, figsize=(15, 5))

# 原始分布
sns.histplot(housing_df['Price'], kde=True, color='lightcoral', ax=axs[0])
axs[0].set_title('原始房价分布')
axs[0].set_xlabel('房价(单位:10万美元)')
axs[0].set_ylabel('频率')
axs[0].grid(True, alpha=0.3)

# 对数变换
log_price = np.log1p(housing_df['Price'])
sns.histplot(log_price, kde=True, color='skyblue', ax=axs[1])
axs[1].set_title('对数变换后的房价分布')
axs[1].set_xlabel('log(1+房价)')
axs[1].set_ylabel('频率')
axs[1].grid(True, alpha=0.3)

# 箱线图展示离群值
sns.boxplot(y=housing_df['Price'], ax=axs[2])
axs[2].set_title('房价箱线图')
axs[2].set_ylabel('房价(单位:10万美元)')
axs[2].grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# 计算房价分布的基本统计量
price_stats = housing_df['Price'].describe()
print("房价分布的基本统计量:")
print(price_stats)
```

## 小结

理解数据分布是数据分析的基础步骤，通过合理的分布分析，我们可以：

1. 更好地理解数据的内在特性
2. 发现数据中的异常和问题
3. 选择合适的分析方法和模型
4. 通过适当的变换改善数据质量

在下一章中，我们将探讨如何利用静态可视化技术进一步分析数据的特征。 